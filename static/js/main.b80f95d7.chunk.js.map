{"version":3,"sources":["redux/actions.js","comps/Firebase.js","comps/UserList.jsx","comps/MessageBox.jsx","comps/Signup_Login.jsx","App.jsx","reportWebVitals.js","redux/reducers.js","redux/store.js","index.js"],"names":["setCurrentUser","type","userID","email","username","avatarURL","loggedIn","isLoggedIn","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","auth","provider","GoogleAuthProvider","storage","UserList","currentUserInfo","useSelector","state","dispatch","useDispatch","useState","userLists","setUserLists","inputUser","setInputUSer","dropDownOpen","setDropDownOpen","chngUsername","setChngUsername","useEffect","collection","onSnapshot","snap","docs","map","doc","id","data","window","addEventListener","removeEventListener","className","Avatar","alt","src","avatar","action","onChange","e","target","value","onClick","preventDefault","length","update","hidden","event","stopPropagation","IconButton","userList","to","MessageBox","file","setFile","inputText","setInputText","progress","setProgress","selectedUser_name","setSelectedUser_name","selectedUser_avatar","setSelectedUser_avatar","convMessages","setConvMessages","conversationIDs","setConversationIDs","currentConvID","setCurrentConvID","fileInputRef","useRef","selUserID","useParams","convID1","convID2","matchingConvID","forEach","dbConvID","set","convNameByUsers","convCreationTime","FieldValue","serverTimestamp","uploading","ref","name","put","on","prog","Math","round","bytesTransferred","totalBytes","err","alert","message","child","getDownloadURL","then","downloadURL","add","photo","recieverID","senderID","timestamp","console","log","orderBy","style","backgroundImage","process","msg","Date","toDate","toLocaleTimeString","max","disabled","accept","files","htmlFor","current","click","SignupLogin","avatars","setAvatars","selectedAvatar","setSelectedAvatar","reloadAvatar","setReloadAvatar","setUsername","gender","setGender","errorMsg","setErrorMsg","loginErrorMsg","setLoginErrorMsg","loginEmail","setLoginEmail","signupEmail","setSignupEmail","dbAuthInfo","setDbAuthInfo","radioBtnMale","radioBtnFemale","radioBtnNone","setTimeout","matchingEmail","info","googleEmail","emailCount","array","i","randomNum","random","push","handleGender","result","Input","placeholder","index","proceed_to_signup","signInWithPopup","user","checked","catch","App","innerWidth","windowWidth","setWindowWith","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","currentUserInfoObj","combineReducers","store","createStore","reducers","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b80f95d7.chunk.js","sourcesContent":["export const setCurrentUser = ({\r\n   userID,\r\n   email,\r\n   username,\r\n   avatarURL,\r\n   isLoggedIn,\r\n}) => {\r\n   return {\r\n      type: \"SET_CURRENT_USER\",\r\n      userID: userID,\r\n      email: email,\r\n      username: username,\r\n      avatarURL: avatarURL,\r\n      loggedIn: isLoggedIn,\r\n   };\r\n};\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n   apiKey: \"AIzaSyAyDiV8QGzUjik-YK1LEmcGjYLxuCtDX7M\",\r\n   authDomain: \"whatsappomar-clone.firebaseapp.com\",\r\n   projectId: \"whatsappomar-clone\",\r\n   storageBucket: \"whatsappomar-clone.appspot.com\",\r\n   messagingSenderId: \"43192057898\",\r\n   appId: \"1:43192057898:web:430e495509d1cbfc6a4353\",\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nconst db = firebaseApp.firestore();\r\nexport const auth = firebase.auth();\r\nexport const provider = new firebase.auth.GoogleAuthProvider();\r\nexport const storage = firebase.storage();\r\n\r\nexport default db;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setCurrentUser } from \"../redux/actions\";\r\n\r\nimport db from \"./Firebase\";\r\n\r\nfunction UserList() {\r\n   const { currentUserInfo } = useSelector((state) => state);\r\n   const dispatch = useDispatch();\r\n\r\n   const [userLists, setUserLists] = useState([]);\r\n   const [inputUser, setInputUSer] = useState(\"\");\r\n\r\n   const [dropDownOpen, setDropDownOpen] = useState(false);\r\n   const [chngUsername, setChngUsername] = useState(false);\r\n   const [chngAvatar, setChngAvatar] = useState(false);\r\n\r\n   useEffect(() => {\r\n      db.collection(\"allUsers\").onSnapshot((snap) => {\r\n         setUserLists(\r\n            snap.docs.map((doc) => {\r\n               return {\r\n                  id: doc.id,\r\n                  data: doc.data(),\r\n               };\r\n            })\r\n         );\r\n      });\r\n   }, []);\r\n\r\n   const optionDropDown = (event) => {\r\n      event.stopPropagation();\r\n\r\n      if (dropDownOpen) {\r\n         setDropDownOpen(false);\r\n      } else {\r\n         setDropDownOpen(true);\r\n      }\r\n   };\r\n\r\n   const handleChngUsername = (e) => {\r\n      e.preventDefault();\r\n\r\n      if (inputUser.length > 0) {\r\n         db.collection(\"allUsers\").doc(currentUserInfo.userID).update({\r\n            username: inputUser,\r\n         });\r\n\r\n         dispatch(\r\n            setCurrentUser({\r\n               userID: currentUserInfo.userID,\r\n               email: currentUserInfo.email,\r\n               username: inputUser,\r\n               avatarURL: currentUserInfo.avatar,\r\n               isLoggedIn: currentUserInfo.loggedIn,\r\n            })\r\n         );\r\n\r\n         setInputUSer(\"\");\r\n         setChngUsername(false);\r\n      }\r\n   };\r\n\r\n   const Logout = () => {\r\n      dispatch(\r\n         setCurrentUser({\r\n            userID: null,\r\n            username: \"unknown\",\r\n            email: \"\",\r\n            avatar: \"\",\r\n            loggedIn: false,\r\n         })\r\n      );\r\n   };\r\n\r\n   useEffect(() => {\r\n      window.addEventListener(\"click\", () => {\r\n         setDropDownOpen(false);\r\n      });\r\n\r\n      return () => {\r\n         window.removeEventListener(\"click\", () => {\r\n            setDropDownOpen(false);\r\n         });\r\n      };\r\n   });\r\n\r\n   return (\r\n      <div className=\"userList\">\r\n         <div className=\"userList__header\">\r\n            <div className=\"header__avatar-name\">\r\n               <span className=\"avatar-name__avatar\">\r\n                  <Avatar\r\n                     type=\"button\"\r\n                     alt={currentUserInfo.username}\r\n                     src={\r\n                        currentUserInfo.avatar\r\n                           ? currentUserInfo.avatar\r\n                           : \"/static/images/avatar/2.jpg\"\r\n                     }\r\n                  />\r\n               </span>\r\n               <span className=\"avatar-name__name\">\r\n                  {chngUsername ? (\r\n                     <form action=\"\" className=\"chngUser\">\r\n                        <input\r\n                           type=\"text\"\r\n                           onChange={(e) => setInputUSer(e.target.value)}\r\n                           value={inputUser}\r\n                        />\r\n                        <button\r\n                           type=\"submit\"\r\n                           onClick={handleChngUsername}\r\n                           hidden\r\n                        ></button>\r\n                        <span\r\n                           className=\"chngUser__closeIcon cursor-p text-danger\"\r\n                           onClick={() => setChngUsername(false)}\r\n                        >\r\n                           <HighlightOffIcon />\r\n                        </span>\r\n                     </form>\r\n                  ) : (\r\n                     currentUserInfo.username\r\n                  )}\r\n               </span>\r\n            </div>\r\n            <div\r\n               className=\"header__optionIcon cursor-p\"\r\n               onClick={optionDropDown}\r\n            >\r\n               <IconButton>\r\n                  <MoreHorizIcon />\r\n               </IconButton>\r\n            </div>\r\n         </div>\r\n         <div className=\"userList__list\">\r\n            <div\r\n               className={\r\n                  dropDownOpen\r\n                     ? \"userList__optionDropDown open\"\r\n                     : \"userList__optionDropDown close\"\r\n               }\r\n            >\r\n               <ul className=\"optionDropDown__ul\">\r\n                  <li onClick={() => setChngUsername(true)}>Change Username</li>\r\n                  <li onClick={Logout}>Log Out</li>\r\n               </ul>\r\n            </div>\r\n            <ul className=\"allList\">\r\n               {userLists.map((userList) => {\r\n                  if (\r\n                     userList.id === currentUserInfo.userID ||\r\n                     userList.data.email === currentUserInfo.email\r\n                  ) {\r\n                     return null;\r\n                  } else {\r\n                     return (\r\n                        <li key={userList.id}>\r\n                           <Link to={`/conv/${userList.id}`}>\r\n                              <div className=\"allList__singleList\">\r\n                                 <span className=\"singleList__avatar\">\r\n                                    <Avatar\r\n                                       alt={userList.data.username}\r\n                                       src={\r\n                                          userList.data.avatarURL\r\n                                             ? userList.data.avatarURL\r\n                                             : \"/static/images/avatar/2.jpg\"\r\n                                       }\r\n                                    />\r\n                                 </span>\r\n                                 <div className=\"singleList__name-and-lastMsg\">\r\n                                    <strong className=\"name\">\r\n                                       {userList.data.username}\r\n                                    </strong>\r\n                                 </div>\r\n                              </div>\r\n                           </Link>\r\n                        </li>\r\n                     );\r\n                  }\r\n               })}\r\n            </ul>\r\n         </div>\r\n         <div className=\"userList__creatorName text-center\">\r\n            <p>\r\n               Created By <strong>MD Omar</strong>\r\n            </p>\r\n         </div>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default UserList;\r\n","import React, { useRef, useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport SendRoundedIcon from \"@material-ui/icons/SendRounded\";\r\nimport PhotoIcon from \"@material-ui/icons/Photo\";\r\nimport { IconButton } from \"@material-ui/core\";\r\n\r\nimport firebase from \"firebase\";\r\nimport db, { storage } from \"./Firebase\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction MessageBox() {\r\n   const { currentUserInfo } = useSelector((state) => state);\r\n\r\n   const [file, setFile] = useState(null);\r\n   const [inputText, setInputText] = useState(\"\");\r\n   const [progress, setProgress] = useState(0);\r\n\r\n   const [selectedUser_name, setSelectedUser_name] = useState(\"\");\r\n   const [selectedUser_avatar, setSelectedUser_avatar] = useState(null);\r\n   const [convMessages, setConvMessages] = useState([]);\r\n   const [conversationIDs, setConversationIDs] = useState([]);\r\n   const [currentConvID, setCurrentConvID] = useState(null);\r\n\r\n   const fileInputRef = useRef(null);\r\n   const { selUserID } = useParams();\r\n\r\n   const handleSendBtn = (e) => {\r\n      e.preventDefault();\r\n\r\n      if (currentConvID) {\r\n         db.collection(\"convs\").doc(currentConvID).collection(\"messages\").add({\r\n            message: inputText,\r\n            recieverID: selUserID,\r\n            senderID: currentUserInfo.userID,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n         });\r\n      } else {\r\n         console.log(\"select a conversation first!!\");\r\n      }\r\n\r\n      setInputText(\"\");\r\n   };\r\n\r\n   useEffect(() => {\r\n      const convID1 = selUserID + currentUserInfo.userID;\r\n      const convID2 = currentUserInfo.userID + selUserID;\r\n\r\n      if (selectedUser_name.length > 0) {\r\n         let matchingConvID = 0;\r\n         conversationIDs.forEach((dbConvID) => {\r\n            if (dbConvID === convID1 || dbConvID === convID2) {\r\n               setCurrentConvID(dbConvID);\r\n               matchingConvID += 1;\r\n            }\r\n         });\r\n\r\n         if (matchingConvID < 1) {\r\n            db.collection(\"convs\")\r\n               .doc(convID2)\r\n               .set({\r\n                  convNameByUsers: `${currentUserInfo.username} & ${selectedUser_name}`,\r\n                  convCreationTime:\r\n                     firebase.firestore.FieldValue.serverTimestamp(),\r\n               });\r\n         }\r\n      }\r\n   }, [conversationIDs, selectedUser_name]);\r\n\r\n   useEffect(() => {\r\n      if (file) {\r\n         const uploading = storage.ref(`files/${file.name}`).put(file);\r\n\r\n         if (currentConvID) {\r\n            uploading.on(\r\n               \"state_changed\",\r\n               (snap) => {\r\n                  const prog = Math.round(\r\n                     (snap.bytesTransferred / snap.totalBytes) * 100\r\n                  );\r\n                  setProgress(prog);\r\n               },\r\n               (err) => {\r\n                  alert(err.message);\r\n               },\r\n               () => {\r\n                  storage\r\n                     .ref(\"files\")\r\n                     .child(file.name)\r\n                     .getDownloadURL()\r\n                     .then((downloadURL) => {\r\n                        db.collection(\"convs\")\r\n                           .doc(currentConvID)\r\n                           .collection(\"messages\")\r\n                           .add({\r\n                              photo: downloadURL,\r\n                              recieverID: selUserID,\r\n                              senderID: currentUserInfo.userID,\r\n                              timestamp:\r\n                                 firebase.firestore.FieldValue.serverTimestamp(),\r\n                           });\r\n\r\n                        setFile(null);\r\n                        setProgress(0);\r\n                     });\r\n               }\r\n            );\r\n         } else {\r\n            console.log(\"select a conversation first!\");\r\n         }\r\n      }\r\n   }, [file]);\r\n\r\n   useEffect(() => {\r\n      if (selUserID) {\r\n         db.collection(\"allUsers\")\r\n            .doc(selUserID)\r\n            .onSnapshot((snap) => {\r\n               setSelectedUser_name(snap.data().username);\r\n               setSelectedUser_avatar(snap.data().avatarURL);\r\n            });\r\n\r\n         if (currentConvID) {\r\n            db.collection(\"convs\")\r\n               .doc(currentConvID)\r\n               .collection(\"messages\")\r\n               .orderBy(\"timestamp\", \"asc\")\r\n               .onSnapshot((snap) => {\r\n                  setConvMessages(\r\n                     snap.docs.map((doc) => {\r\n                        return {\r\n                           id: doc.id,\r\n                           data: doc.data(),\r\n                        };\r\n                     })\r\n                  );\r\n               });\r\n         }\r\n      }\r\n\r\n      db.collection(\"convs\").onSnapshot((snap) => {\r\n         setConversationIDs(\r\n            snap.docs.map((doc) => {\r\n               return doc.id;\r\n            })\r\n         );\r\n      });\r\n\r\n      return () => {\r\n         setConvMessages([]);\r\n      };\r\n   }, [selUserID, currentConvID]);\r\n\r\n   return (\r\n      <div className=\"messageBox\">\r\n         <div className=\"messageBox__header\">\r\n            <div className=\"header__avatarAndName\">\r\n               <span className=\"avatar\">\r\n                  <Avatar\r\n                     type=\"button\"\r\n                     alt={selectedUser_name}\r\n                     src={\r\n                        selectedUser_avatar\r\n                           ? selectedUser_avatar\r\n                           : \"/static/images/avatar/2.jpg\"\r\n                     }\r\n                  />\r\n               </span>\r\n               <span className=\"name\">\r\n                  <strong>{selectedUser_name}</strong>\r\n               </span>\r\n            </div>\r\n            <div className=\"header__optionIcon cursor-p\">\r\n               <IconButton>\r\n                  <MoreHorizIcon />\r\n               </IconButton>\r\n            </div>\r\n         </div>\r\n         <div\r\n            className=\"messageBox__body\"\r\n            style={{\r\n               backgroundImage: `url(${process.env.PUBLIC_URL}/whatsapp_bg.jpg)`,\r\n            }}\r\n         >\r\n            <ul>\r\n               {convMessages.map((msg) => {\r\n                  if (msg.data.photo) {\r\n                     return (\r\n                        <li\r\n                           key={msg.id}\r\n                           className={\r\n                              msg.data.senderID === currentUserInfo.userID\r\n                                 ? \"reciever_photo\"\r\n                                 : \"sender_photo\"\r\n                           }\r\n                        >\r\n                           <div className=\"wrapper__image\">\r\n                              <div>\r\n                                 <img\r\n                                    src={msg.data.photo}\r\n                                    alt=\"Failed to load picture\"\r\n                                    className=\"img-fluid text-white\"\r\n                                 />\r\n                                 <div className=\"wrapper__time\">\r\n                                    {msg.data.timestamp\r\n                                       ? new Date(\r\n                                            msg.data.timestamp.toDate()\r\n                                         ).toLocaleTimeString()\r\n                                       : null}\r\n                                 </div>\r\n                              </div>\r\n                           </div>\r\n                        </li>\r\n                     );\r\n                  } else {\r\n                     return (\r\n                        <li\r\n                           key={msg.id}\r\n                           className={\r\n                              msg.data.senderID === currentUserInfo.userID\r\n                                 ? \"reciever\"\r\n                                 : \"sender\"\r\n                           }\r\n                        >\r\n                           <div className=\"li__wrapper\">\r\n                              <div className=\"wrapper__message\">\r\n                                 {msg.data.message}\r\n                              </div>\r\n                              <div className=\"wrapper__time\">\r\n                                 {msg.data.timestamp\r\n                                    ? new Date(\r\n                                         msg.data.timestamp.toDate()\r\n                                      ).toLocaleTimeString()\r\n                                    : null}\r\n                              </div>\r\n                           </div>\r\n                        </li>\r\n                     );\r\n                  }\r\n               })}\r\n            </ul>\r\n         </div>\r\n         <div className=\"messageBox__inputField\">\r\n            {progress > 0 ? (\r\n               <div className=\"inputField__progressBar\">\r\n                  <progress value={progress} max=\"100\" />\r\n               </div>\r\n            ) : null}\r\n            <div className=\"inputField__chooseFile\">\r\n               <input\r\n                  disabled={progress > 0}\r\n                  type=\"file\"\r\n                  accept=\"image/jpg, image/png, image/jpeg, image/gif\"\r\n                  className=\"file\"\r\n                  ref={fileInputRef}\r\n                  onChange={(e) => setFile(e.target.files[0])}\r\n               />\r\n               <label\r\n                  htmlFor=\"file\"\r\n                  onClick={() => fileInputRef.current.click()}\r\n               >\r\n                  <PhotoIcon />\r\n               </label>\r\n            </div>\r\n            <form className=\"inputField__inputBox\">\r\n               <div className=\"inputBox\">\r\n                  <input\r\n                     type=\"text\"\r\n                     onChange={(e) => setInputText(e.target.value)}\r\n                     value={inputText}\r\n                  />\r\n               </div>\r\n               <button\r\n                  type=\"submit\"\r\n                  className={\r\n                     inputText\r\n                        ? \"inputBox__sendBtn text-danger cursor-p\"\r\n                        : \"inputBox__sendBtn cursor-p\"\r\n                  }\r\n                  onClick={handleSendBtn}\r\n                  disabled={!inputText}\r\n               >\r\n                  <SendRoundedIcon />\r\n               </button>\r\n            </form>\r\n         </div>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default MessageBox;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { IconButton, Input, Avatar } from \"@material-ui/core\";\r\nimport CachedIcon from \"@material-ui/icons/Cached\";\r\n\r\nimport firebase from \"firebase\";\r\nimport db, { auth, provider } from \"./Firebase\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setCurrentUser } from \"../redux/actions\";\r\n\r\nconst SignupLogin = () => {\r\n   const dispatch = useDispatch();\r\n\r\n   const [avatars, setAvatars] = useState([]);\r\n   const [selectedAvatar, setSelectedAvatar] = useState(\"\");\r\n   const [reloadAvatar, setReloadAvatar] = useState(false);\r\n\r\n   const [username, setUsername] = useState(\"\");\r\n   const [gender, setGender] = useState(\"\");\r\n   const [errorMsg, setErrorMsg] = useState(\"\");\r\n   const [loginErrorMsg, setLoginErrorMsg] = useState(\"\");\r\n\r\n   const [loginEmail, setLoginEmail] = useState(\"\");\r\n   const [signupEmail, setSignupEmail] = useState(\"\");\r\n   const [dbAuthInfo, setDbAuthInfo] = useState([]);\r\n\r\n   const radioBtnMale = useRef(null);\r\n   const radioBtnFemale = useRef(null);\r\n   const radioBtnNone = useRef(null);\r\n\r\n   useEffect(() => {\r\n      db.collection(\"allUsers\").onSnapshot((snap) => {\r\n         setDbAuthInfo(\r\n            snap.docs.map((doc) => {\r\n               return {\r\n                  id: doc.id,\r\n                  data: doc.data(),\r\n               };\r\n            })\r\n         );\r\n      });\r\n   }, []);\r\n\r\n   useEffect(() => {\r\n      setTimeout(() => {\r\n         if (loginEmail.length > 0) {\r\n            let matchingEmail = 0;\r\n\r\n            dbAuthInfo.forEach((info) => {\r\n               if (info.data.googleEmail === loginEmail) {\r\n                  matchingEmail += 1;\r\n                  dispatch(\r\n                     setCurrentUser({\r\n                        userID: info.id,\r\n                        email: info.data.googleEmail,\r\n                        username: info.data.username,\r\n                        avatarURL: info.data.avatarURL,\r\n                        isLoggedIn: true,\r\n                     })\r\n                  );\r\n               }\r\n            });\r\n\r\n            if (matchingEmail < 1) {\r\n               setLoginErrorMsg(\r\n                  \"No account signed up using this gmail.\\n Please signup first!\"\r\n               );\r\n            } else {\r\n               setLoginErrorMsg(\"\");\r\n            }\r\n\r\n            setLoginEmail(\"\");\r\n         }\r\n      }, 500);\r\n   }, [loginEmail, dbAuthInfo]);\r\n\r\n   useEffect(() => {\r\n      if (signupEmail.length > 0) {\r\n         let emailCount = 0;\r\n         dbAuthInfo.forEach((info) => {\r\n            if (info.data.googleEmail === signupEmail) {\r\n               emailCount += 1;\r\n            }\r\n         });\r\n\r\n         if (emailCount > 0) {\r\n            alert(\"Account already exist\");\r\n         } else {\r\n            db.collection(\"allUsers\").add({\r\n               username: username,\r\n               googleEmail: signupEmail,\r\n               avatarURL: selectedAvatar ? selectedAvatar : \"\",\r\n               timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n            });\r\n            setLoginEmail(signupEmail);\r\n         }\r\n\r\n         setSignupEmail(\"\");\r\n      }\r\n   }, [signupEmail]);\r\n\r\n   /* Handle gender & radio buttons & avatar */\r\n   useEffect(() => {\r\n      setReloadAvatar(false);\r\n      if (gender) {\r\n         let array = [];\r\n         for (let i = 0; i < 10; i++) {\r\n            const randomNum =\r\n               Math.random() * 5000 + (username ? username : null);\r\n\r\n            array.push(\r\n               `https://avatars.dicebear.com/api/${gender}/${randomNum}.svg`\r\n            );\r\n         }\r\n         setAvatars(array);\r\n      }\r\n   }, [gender, reloadAvatar]);\r\n\r\n   const handleGender = (e) => {\r\n      const result = e.target.value;\r\n      if (result === \"none\") {\r\n         setGender(\"\");\r\n         setAvatars([]);\r\n         setSelectedAvatar(\"\");\r\n      } else {\r\n         setGender(result);\r\n      }\r\n   };\r\n\r\n   const unCheckAllRadioBtn = () => {\r\n      if (radioBtnMale.current.checked) {\r\n         radioBtnMale.current.checked = false;\r\n      }\r\n      if (radioBtnFemale.current.checked) {\r\n         radioBtnFemale.current.checked = false;\r\n      }\r\n      if (radioBtnNone.current.checked) {\r\n         radioBtnNone.current.checked = false;\r\n      }\r\n\r\n      setGender(\"\");\r\n      setAvatars([]);\r\n      setSelectedAvatar(\"\");\r\n   };\r\n   /* Handle gender & radio Buttons end */\r\n\r\n   const handleSingup = () => {\r\n      let proceed_to_signup = false;\r\n\r\n      if (username.length < 1) {\r\n         proceed_to_signup = false;\r\n         setErrorMsg(\"Please provide an username\");\r\n      } else {\r\n         proceed_to_signup = true;\r\n         setErrorMsg(\"\");\r\n      }\r\n\r\n      if (proceed_to_signup) {\r\n         auth\r\n            .signInWithPopup(provider)\r\n            .then((result) => {\r\n               setSignupEmail(result.user.email);\r\n               setUsername(\"\");\r\n               if (selectedAvatar.length > 0) {\r\n                  unCheckAllRadioBtn();\r\n               }\r\n            })\r\n            .catch((err) => alert(err.message));\r\n      }\r\n   };\r\n\r\n   const handleLogin = () => {\r\n      auth\r\n         .signInWithPopup(provider)\r\n         .then((result) => {\r\n            setLoginEmail(result.user.email);\r\n         })\r\n         .catch((err) => alert(err.message));\r\n   };\r\n\r\n   return (\r\n      <div className=\"signup_login row\">\r\n         <div className=\"signup_login__wrapper col-lg-8 col-md-10 col-10\">\r\n            <div className=\"wrapper__userInfo-googleSignup\">\r\n               <strong className=\"userInfo__title\">Signup:</strong>\r\n               <div className=\"userInfo__errorMsg text-danger\">\r\n                  <p>{errorMsg}</p>\r\n               </div>\r\n               <div className=\"userInfo__username\">\r\n                  <div className=\"username__avatar\">\r\n                     <Avatar\r\n                        src={\r\n                           selectedAvatar\r\n                              ? selectedAvatar\r\n                              : \"/static/images/avatar/1.jpg\"\r\n                        }\r\n                        alt={username}\r\n                     />\r\n                  </div>\r\n                  <div className=\"username__input\">\r\n                     <Input\r\n                        type=\"text\"\r\n                        placeholder=\"Username\"\r\n                        onChange={(e) => setUsername(e.target.value)}\r\n                        value={username}\r\n                     />\r\n                  </div>\r\n               </div>\r\n               <div className=\"userInfo__gender\">\r\n                  <div className=\"gender__male\">\r\n                     <input\r\n                        type=\"radio\"\r\n                        value=\"male\"\r\n                        name=\"gender\"\r\n                        onChange={handleGender}\r\n                        ref={radioBtnMale}\r\n                     />\r\n                     <span>Male</span>\r\n                  </div>\r\n                  <div className=\"gender__female\">\r\n                     <input\r\n                        type=\"radio\"\r\n                        value=\"female\"\r\n                        name=\"gender\"\r\n                        onChange={handleGender}\r\n                        ref={radioBtnFemale}\r\n                     />\r\n                     <span>Female</span>\r\n                  </div>\r\n                  <div className=\"gender__none\">\r\n                     <input\r\n                        type=\"radio\"\r\n                        value=\"none\"\r\n                        name=\"gender\"\r\n                        onChange={handleGender}\r\n                        ref={radioBtnNone}\r\n                     />\r\n                     <span>None</span>\r\n                  </div>\r\n               </div>\r\n               <div className={avatars.length > 0 ? \"row\" : null}>\r\n                  <div\r\n                     className={\r\n                        avatars.length > 0\r\n                           ? \"userInfo__avatar col-lg-6 col-10 col-md-8\"\r\n                           : null\r\n                     }\r\n                  >\r\n                     <div\r\n                        className={\r\n                           avatars.length > 0\r\n                              ? \"avatar__reload\"\r\n                              : \"avatar__reload d-none\"\r\n                        }\r\n                     >\r\n                        <strong>Choose Avatar:</strong>\r\n                        <IconButton onClick={() => setReloadAvatar(true)}>\r\n                           <CachedIcon />\r\n                        </IconButton>\r\n                     </div>\r\n                     {avatars\r\n                        ? avatars.map((avatar, index) => {\r\n                             return (\r\n                                <IconButton\r\n                                   key={index}\r\n                                   onClick={() => setSelectedAvatar(avatar)}\r\n                                >\r\n                                   <Avatar type=\"button\" src={avatar} />\r\n                                </IconButton>\r\n                             );\r\n                          })\r\n                        : null}\r\n                  </div>\r\n               </div>\r\n               <div className=\"row\">\r\n                  <Link\r\n                     to=\"/chatapp\"\r\n                     className=\"googleSignup cursor-p col-12\"\r\n                     onClick={handleSingup}\r\n                  >\r\n                     <div className=\"googleSingup__avatar\">\r\n                        <Avatar\r\n                           className=\"avatar\"\r\n                           src={`${process.env.PUBLIC_URL}/google_icon.png`}\r\n                        />\r\n                     </div>\r\n                     <div className=\"googleSignup__text\">\r\n                        <strong>Signup With Google</strong>\r\n                     </div>\r\n                  </Link>\r\n               </div>\r\n            </div>\r\n            <div className=\"wrapper__or\">\r\n               <div className=\"orDiv1\"></div>\r\n               <span>OR</span>\r\n               <div className=\"orDiv2\"></div>\r\n            </div>\r\n            <div className=\"googleLogin__errorMsg text-danger text-center\">\r\n               <p>{loginErrorMsg}</p>\r\n            </div>\r\n            <Link\r\n               to=\"/chatapp\"\r\n               className=\"wrapper__googleLogin cursor-p\"\r\n               onClick={handleLogin}\r\n            >\r\n               <div className=\"googleLogin__avatar\">\r\n                  <Avatar\r\n                     className=\"avatar\"\r\n                     src={`${process.env.PUBLIC_URL}/google_icon.png`}\r\n                  />\r\n               </div>\r\n               <div className=\"googleLogin__text\">\r\n                  <strong>Login With Google</strong>\r\n               </div>\r\n            </Link>\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default SignupLogin;\r\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\n\nimport \"./sass/main.css\";\nimport UserList from \"./comps/UserList\";\nimport MessageBox from \"./comps/MessageBox\";\nimport SignupLogin from \"./comps/Signup_Login\";\n\nimport { useSelector } from \"react-redux\";\n\nfunction App() {\n   const { currentUserInfo } = useSelector((state) => state);\n\n   const [windowWidth, setWindowWith] = useState(window.innerWidth);\n\n   useEffect(() => {\n      window.addEventListener(\"resize\", () => setWindowWith(window.innerWidth));\n      console.log(windowWidth);\n\n      return () => {\n         window.removeEventListener(\"resize\", () =>\n            setWindowWith(window.innerWidth)\n         );\n      };\n   });\n\n   return (\n      <BrowserRouter>\n         <div className=\"app container-fluid\">\n            {currentUserInfo.loggedIn ? (\n               <Switch>\n                  <Route exact path=\"/chatapp\">\n                     {windowWidth > 500 ? (\n                        <div className=\"app__body row\">\n                           <div className=\"body__userList col-lg-4 col-md-4 col-12\">\n                              <UserList />\n                           </div>\n                           <div className=\"body__messageBox col-lg-8 col-md-8 col-12\">\n                              <div className=\"startConvMsg\">\n                                 <div className=\"startConvMsg__msg\">\n                                    <h2>Welcome to Chat App</h2>\n                                    <div>\n                                       <h4 className=\"text-success\">\n                                          You have logged in successfully !\n                                       </h4>\n                                       <h6>Let's Start a Conversation !</h6>\n                                    </div>\n                                    <p>\n                                       Created By <strong>MD Omar</strong>\n                                    </p>\n                                 </div>\n                              </div>\n                           </div>\n                        </div>\n                     ) : (\n                        <div className=\"app__body row\">\n                           <div className=\"body__userList col-lg-4 col-md-4 col-12\">\n                              <UserList />\n                           </div>\n                        </div>\n                     )}\n                  </Route>\n                  <Route exact path=\"/chatapp/conv/:selUserID\">\n                     {windowWidth > 500 ? (\n                        <div className=\"app__body row\">\n                           <div className=\"body__userList col-lg-4 col-md-4 col-12\">\n                              <UserList />\n                           </div>\n                           <div className=\"body__messageBox col-lg-8 col-md-8 col-12\">\n                              <MessageBox />\n                           </div>\n                        </div>\n                     ) : (\n                        <div className=\"app__body row\">\n                           <div className=\"body__messageBox col-lg-8 col-md-8 col-12\">\n                              <MessageBox />\n                           </div>\n                        </div>\n                     )}\n                  </Route>\n                  <Redirect to=\"/chatapp\" />\n               </Switch>\n            ) : (\n               <SignupLogin />\n            )}\n         </div>\n      </BrowserRouter>\n   );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from \"redux\";\r\n\r\nconst currentUserInfoObj = {\r\n   userID: null,\r\n   username: \"unknown\",\r\n   email: \"\",\r\n   avatar: \"\",\r\n   loggedIn: false,\r\n};\r\nexport const currentUserInfo = (state = currentUserInfoObj, action) => {\r\n   switch (action.type) {\r\n      case \"SET_CURRENT_USER\":\r\n         return (state = {\r\n            userID: action.userID,\r\n            username: action.username,\r\n            email: action.email,\r\n            avatar: action.avatarURL,\r\n            loggedIn: action.loggedIn,\r\n         });\r\n\r\n      default:\r\n         return state;\r\n   }\r\n};\r\n\r\nexport default combineReducers({ currentUserInfo });\r\n","import { createStore } from \"redux\";\r\nimport reducers from \"./reducers\";\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n   <React.StrictMode>\n      <Provider store={store}>\n         <App />\n      </Provider>\n   </React.StrictMode>,\n   document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}